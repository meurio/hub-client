workspace:
  base: /code

pipeline:
  unit-tests-lerna:
    image: node:9-alpine
    commands:
      - npm install
      - ./node_modules/.bin/lerna bootstrap
      - ./node_modules/.bin/lerna run test --parallel
    when:
      event: [push, tag]

  build-staging:
    image: node:9-alpine
    environment:
      - NODE_ENV=production
      - API_URL=https://api.staging.bonde.org
      - BOT_URL=https://beta.staging.bonde.org
      - GRAPHQL_URL=https://data.staging.bonde.org/graphql
      - APP_DOMAIN=staging.bonde.org
      - AWS_BUCKET=bonde-assets-staging
    commands:
      - export PAGARME_KEY=$STAG_PAGARME_KEY
      - export SENTRY_DSN_PUBLIC=$STAG_SENTRY_DSN_PUBLIC
      - export GOOGLE_FONTS_API_KEY=$STAG_GOOGLE_FONTS_API_KEY
      - ./node_modules/.bin/lerna run build --parallel
    secrets: [ stag_pagarme_key, stag_sentry_dsn_public, stag_google_fonts_api_key ]
    when:
      status: success
      branch: [hotfix-*, release-*, feature-*, develop]

  publish-admin-staging:
    image: plugins/docker
    repo: nossas/bonde-admin
    group: publishing
    secrets: [ docker_username, docker_password ]
    dockerfile: packages/bonde-admin/Dockerfile
    context: packages/bonde-admin/
    tags:
      - ${DRONE_BRANCH}
    when:
      status: success
      branch: [hotfix-*, release-*, feature-*, develop]

  publish-public-staging:
    image: plugins/docker
    repo: nossas/bonde-public
    group: publishing
    secrets: [ docker_username, docker_password ]
    dockerfile: packages/bonde-public/Dockerfile
    context: packages/bonde-public/
    tags:
      - ${DRONE_BRANCH}
    when:
      status: success
      branch: [hotfix-*, release-*, feature-*, develop]

  publish-styleguide-staging:
    image: plugins/docker
    repo: nossas/bonde-styleguide
    group: publishing
    secrets: [ docker_username, docker_password ]
    dockerfile: packages/bonde-styleguide/Dockerfile
    context: packages/bonde-styleguide/
    tags:
      - ${DRONE_BRANCH}
    when:
      status: success
      branch: [hotfix-*, release-*, feature-*, develop]

  publish-admin-canary-staging:
    image: plugins/docker
    repo: nossas/bonde-admin-canary
    group: publishing
    secrets: [ docker_username, docker_password ]
    dockerfile: packages/bonde-admin-canary/Dockerfile
    context: packages/bonde-admin-canary/
    tags:
      - ${DRONE_BRANCH}
    when:
      status: success
      branch: [hotfix-*, release-*, feature-*, develop]

  # deploy-admin-staging:
  #   image: nossas/s3cmd
  #   group: concurrent
  #   commands:
  #     - echo access_key=$AWS_ACCESS_KEY_ID >> ~/.s3cfg
  #     - echo secret_key=$AWS_SECRET_ACCESS_KEY >> ~/.s3cfg
  #     - s3cmd --acl-public --rexclude='\.svg$|\.html$|\.ttf$|\.eot$|\.png$|\.otf|woff(2)?(\?v=[0-9]\.[0-9]\.[0-9])?$' --add-header='Content-Encoding:gzip' --add-header='Cache-Control:max-age=3600' sync public/ s3://bonde-assets-staging
  #     - s3cmd --acl-public --exclude='*' --rinclude='\.svg$|\.html$|\.ttf$|\.eot$|\.png$|\.otf|woff(2)?(\?v=[0-9]\.[0-9]\.[0-9])?$' --add-header='Cache-Control:max-age=3600' sync public/ s3://bonde-assets-staging
  #   secrets: [ aws_access_key_id, aws_secret_access_key ]
  #   when:
  #     status: success
  #     branch: [hotfix-*, release-*, feature-*, develop]
  deploy-staging:
    image: peloton/drone-rancher
    group: deploying
    url: http://cluster.bonde.org
    service: staging/client
    docker_image: nossas/bonde-admin:${DRONE_BRANCH}
    timeout: 360
    confirm: true
    secrets: [ rancher_access_key, rancher_secret_key ]
    when:
      status: success
      branch: [hotfix-*, release-*, feature-*, develop]

  deploy-staging-non-ssl:
    image: peloton/drone-rancher
    group: deploying
    url: http://cluster.bonde.org
    service: staging/client-non-ssl
    docker_image: nossas/bonde-public:${DRONE_BRANCH}
    timeout: 360
    confirm: true
    secrets: [ rancher_access_key, rancher_secret_key ]
    when:
      status: success
      branch: [hotfix-*, release-*, feature-*, develop]

  deploy-staging-styleguide:
    image: peloton/drone-rancher
    group: deploying
    url: http://cluster.bonde.org
    service: staging/styleguide
    docker_image: nossas/bonde-styleguide:${DRONE_BRANCH}
    timeout: 360
    confirm: true
    secrets: [ rancher_access_key, rancher_secret_key ]
    when:
      status: success
      branch: [hotfix-*, release-*, feature-*, develop]

  deploy-staging-admin-canary:
    image: peloton/drone-rancher
    group: deploying
    url: http://cluster.bonde.org
    service: staging/admin-canary
    docker_image: nossas/bonde-admin-canary:${DRONE_BRANCH}
    timeout: 360
    confirm: true
    secrets: [ rancher_access_key, rancher_secret_key ]
    when:
      status: success
      branch: [hotfix-*, release-*, feature-*, develop]

  build-production:
    image: node:9-alpine
    environment:
      - NODE_ENV=production
      - API_URL=https://api.bonde.org
      - BOT_URL=https://beta.bonde.org
      - GRAPHQL_URL=https://data.bonde.org/graphql
      - APP_DOMAIN=bonde.org
      - AWS_BUCKET=bonde-assets
    commands:
      - export PAGARME_KEY=$PROD_PAGARME_KEY
      - export SENTRY_DSN_PUBLIC=$PROD_SENTRY_DSN_PUBLIC
      - export GOOGLE_FONTS_API_KEY=$PROD_GOOGLE_FONTS_API_KEY
      - ./node_modules/.bin/lerna run build --parallel
    secrets: [ prod_pagarme_key, prod_sentry_dsn_public, prod_google_fonts_api_key ]
    when:
      status: success
      event: tag

  publish-admin-production:
    image: plugins/docker
    repo: nossas/bonde-admin
    group: publishing
    secrets: [ docker_username, docker_password ]
    dockerfile: packages/bonde-admin/Dockerfile
    context: packages/bonde-admin/
    tags:
      - ${DRONE_TAG##v}
    when:
      status: success
      event: tag

  publish-public-production:
    image: plugins/docker
    repo: nossas/bonde-public
    group: publishing
    secrets: [ docker_username, docker_password ]
    dockerfile: packages/bonde-public/Dockerfile
    context: packages/bonde-public/
    tags:
      - ${DRONE_TAG##v}
    when:
      status: success
      event: tag

  deploy-production:
    image: peloton/drone-rancher
    group: deploying_prod
    url: http://cluster.bonde.org
    service: bonde/client
    docker_image: "nossas/bonde-admin:${DRONE_TAG##v}"
    timeout: 360
    confirm: true
    secrets: [ rancher_access_key, rancher_secret_key ]
    when:
      status: success
      event: tag

  deploy-production-non-ssl:
    image: peloton/drone-rancher
    group: deploying_prod
    url: http://cluster.bonde.org
    service: bonde/client-non-ssl
    docker_image: "nossas/bonde-public:${DRONE_TAG##v}"
    timeout: 360
    confirm: true
    secrets: [ rancher_access_key, rancher_secret_key ]
    when:
      status: success
      event: tag

  notify:
    image: plugins/slack
    webhook: https://hooks.slack.com/services/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
    channel: bonde_bots
    username: CI - ${DRONE_REPO_NAME}
    when:
      event: [ push, tag, build, publish, deployment, pull_request ]
      status: [ success, failure ]
